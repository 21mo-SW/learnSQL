SELECT *
FROM EMP;

--LAG 함수
SELECT ENAME, S1, S2, DECODE(S1, S2, NO-1, NO)
FROM(
SELECT ENAME, SAL "S1", LAG(SAL, 1, 0) OVER(ORDER BY SAL DESC) "S2", 
ROWNUM "NO"
FROM
(
SELECT ENAME, SAL
FROM EMP
ORDER BY SAL DESC
));

SELECT ENAME, SAL , LAG(SAL, 1, 0) OVER(ORDER BY SAL DESC)
FROM EMP;

--RANK OVER
SELECT ENAME , SAL, RANK() OVER(ORDER BY SAL DESC)
FROM EMP;

SELECT NAME, HEIGHT, RANK() OVER (ORDER BY HEIGHT DESC)
FROM STUDENT;

--학년별 키 순위를 구하시오.
SELECT NAME, GRADE, HEIGHT, RANK() OVER (PARTITION BY GRADE ORDER BY HEIGHT DESC) 
FROM STUDENT;

--카티션 곱
SELECT *
FROM EMP, DEPT;

--Inner Join(오라클 버전으로)
SELECT E.ENAME, E.DEPTNO, D.DNAME, D.LOC
FROM EMP e, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT *
FROM DEPT D, EMP E --DEPTNO에 숫자를 넣는 이유는 DB는오브젝트를 쓸 수 없어서이다.그래서 번호를 부여하고 그행을 찾아가기에 그행을 그냥 오브젝트라고 보면된다.
WHERE D.DEPTNO = E.DEPTNO;
ROLLBACK;
DELETE FROM DEPT WHERE DEPTNO = 10;

--LEFT OUTER Join
SELECT *
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO(+); 

--RIGHT OUTER Join
SELECT *
FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO;

--237p
SELECT S.NAME "STU_NAME", P.NAME "PROF_NAME"
FROM STUDENT S, PROFESSOR P
WHERE S.PROFNO = P.PROFNO(+);

--DDL (테이블 삭제 (drop), 수정(alter), 생성(create))
--reply 테이블 만들기
CREATE TABLE REPLY(
    id number,
    content varchar2(200) not null,
    boardId number,
    userId number,
    CONSTRAINT REPLY_PK PRIMARY KEY (id),
    CONSTRAINT REPLY_PK_BOARD_ID FOREIGN KEY (boardId) REFERENCES Board(id),
    CONSTRAINT REPLY_PK_USER_ID FOREIGN KEY (userId) REFERENCES Users(id)
);

CREATE SEQUENCE users_seq
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE board_seq
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE reply_seq
INCREMENT BY 1
START WITH 1;

--Users, Board, Reply
--DNL(데이터 조작어)
INSERT INTO USERS(ID, USERNAME, EMAIL) --괄호안 생략가능. 밑에 다 넣을거니까
VALUES(USERS_SEQ.nextval, 'ssar', 'ssar@nate.com');

INSERT INTO USERS(ID, USERNAME, EMAIL)
VALUES(USERS_SEQ.nextval, 'love', 'love@nate.com');

INSERT INTO USERS(ID, USERNAME, EMAIL)
VALUES(USERS_SEQ.nextval, 'cos', 'cos@nate.com');

commit;

select * from users;


INSERT INTO BOARD(ID, TITLE, CONTENT, USERID)
VALUES(BOARD_SEQ.nextval, '오라클 1강', 'DDL이란?', 1);

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID)
VALUES(BOARD_SEQ.nextval, '오라클 2강', 'DML이란?', 1);

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID)
VALUES(BOARD_SEQ.nextval, '오라클 3강', 'DCL이란?', 2);

INSERT INTO BOARD(ID, TITLE, CONTENT, USERID)
VALUES(BOARD_SEQ.nextval, '오라클 4강', 'DQL이란?', 1);

COMMIT;

INSERT INTO REPLY(ID, CONTENT, BOARDID, USERID)
VALUES(REPLY_SEQ.nextval, '재밋어요', 1, 1);

INSERT INTO REPLY(ID, CONTENT, BOARDID, USERID)
VALUES(REPLY_SEQ.nextval, '진짜 재밋어요', 1, 2);

COMMIT;

SELECT * FROM BOARD;
SELECT * FROM REPLY;

--테이블 데이터 밀때
DELETE FROM BOARD;
DELETE FROM USERS;
COMMIT;

--시퀀스 삭제
DROP SEQUENCE BOARD_SEQ;
DROP SEQUENCE USERS_SEQ;

--조인
SELECT *
FROM USERS U, BOARD B
WHERE U.ID = B.USERID;

SELECT *
FROM USERS U, BOARD B
WHERE U.ID = B.USERID(+);

SELECT *
FROM USERS U, REPLY R
WHERE U.ID = R.USERID(+)
AND R.ID IS NULL;

SELECT *
FROM USERS U , REPLY R
WHERE U.ID = R.USERID(+)
MINUS
SELECT *
FROM USERS U , REPLY R
WHERE U.ID = R.USERID;

SELECT *
FROM BOARD B , REPLY R
WHERE B.ID = R.BOARDID;

SELECT B.ID, B.TITLE, B.USERID, COUNT(R.ID) "댓글수"
FROM BOARD B, REPLY R
WHERE B.ID = R.BOARDID(+) 
GROUP BY B.ID, B.TITLE, B.USERID;

SELECT ID, TITLE, USERID, --SELECT은 행마다 실행된다.
(SELECT COUNT(*) FROM REPLY WHERE BOARDID = B.ID) "댓글수"
FROM BOARD B;

SELECT B.ID, B.TITLE, U.USERNAME, COUNT(R.ID) "댓글수"
FROM BOARD B, USERS U, REPLY R
WHERE B.ID = R.BOARDID(+) AND B.USERID = U.ID
GROUP BY B.ID, B.TITLE, U.USERNAME;